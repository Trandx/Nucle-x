
extend type Mutation {
    CreateClient(input: CreateClientInput @spread): CreateClientResult! @guard(with: ["api"])  @field(resolver: "Clients\\create")
    #  #@spread convert object to php array
    UpdateClient(input: UpdateClientInput @spread): UpdateClientResult! @guard(with: ["api"]) @field(resolver: "Clients\\update")
    NewClientToken(input:NewClientTokenInput @spread): NewClientTokenResult! @guard(with: ["api"]) @field(resolver: "Clients\\newClientToken")
    DeleteClient(input: DeleteClientInput! @spread): DeleteClientResult! @guard(with: ["api"]) @field(resolver: "Clients\\delete")
    # # updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResult! @field(resolver: "Auth\\updateForgottenPassword")
    # register(input: RegisterInput @spread): RegisterResult! @field(resolver: "Auth\\register")
    # socialLogin(input: SocialLoginInput! @spread): LoginResult!  @field(resolver: "Auth\\socialLogin")
    # #verifyEmail(input: VerifyEmailInput! @spread): TokenPayload! @field(resolver: "Auth\\verifyEmail")
    # resetPassword(input: ResetPasswordInput! @spread): ResetPasswordResult! @field(resolver: "Auth\\resetPassword")
    # updatePassword(input: UpdatePasswordInput! @spread): UpdatePasswordResult! @guard(with: ["api"]) @field(resolver: "Auth\\updatePassword")
    #                                                                         #@whereAuth(relation: "user", guard:"api")
    # verifyCode(input: VerifyCodeInput! @spread): VerifyCodeResult! @field(resolver: "Auth\\verifyCode")
    # resendCode(input: ResendCodeInput! @spread): ResendCodeResult! @field(resolver: "Auth\\resendCode")

}


### type import ####

#import ../../Type/index.graphql

###############################

### input import ####

#import ../../Input/index.graphql
